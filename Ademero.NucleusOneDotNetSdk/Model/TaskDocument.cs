using System;
using System.Collections.Generic;
using System.Linq;

namespace Ademero.NucleusOneDotNetSdk.Model
{
    // Originally generated by nucleus_one_utilities
    [Serializable]
    public class TaskDocument : Common.Model.Entity<ApiModel.TaskDocument>, IDocumentMixin
    {
        private TaskDocument(NucleusOneApp app) : base(app) { }

        public static TaskDocument FromApiModel(
            ApiModel.TaskDocument apiModel,
            NucleusOneApp app = null
        )
        {
            return new TaskDocument(app)
            {
                Id = apiModel.Id,
                TaskId = apiModel.TaskId,
                DocumentId = apiModel.DocumentId,
                ThumbnailUrl = apiModel.ThumbnailUrl
            };
        }

        #region Properties

        public string Id { get; set; }
        public string TaskId { get; set; }
        public string DocumentId { get; set; }
        public string ThumbnailUrl { get; set; }

        public string OrganizationId { get; set; }
        public string ProjectId { get; set; }
        public string ProjectName { get; set; }
        public string ProjectAccessType { get; set; }
        public string TaskDocumentId { get; set; }
        public string TaskDocumentPath { get; set; }
        public string TaskDocumentHexColor { get; set; }
        public string CreatedOn { get; set; }
        public string CreatedByUserId { get; set; }
        public string CreatedByUserEmail { get; set; }
        public string CreatedByUserName { get; set; }
        public string ModifiedOn { get; set; }
        public string ModifiedByUserId { get; set; }
        public string ModifiedByUserEmail { get; set; }
        public string ModifiedByUserName { get; set; }
        public string Name { get; set; }
        public string NameLower { get; set; }
        public string Origin { get; set; }
        public bool IsActive { get; set; }
        public bool IsMarkedForPurge { get; set; }
        public bool IsSigned { get; set; }
        public bool SignatureSessionIsActive { get; set; }
        public bool HasSinglePageImages { get; set; }
        public string SignaturesCompletedOn { get; set; }
        public string PurgeMarkedOn { get; set; }
        public bool FailedBuildAttempts { get; set; }
        public string LastError { get; set; }
        public int PageCount { get; set; }
        public int FileSize { get; set; }
        public string BucketName { get; set; }
        public string SourceObjectName { get; set; }
        public string ThumbnailObjectName { get; set; }
        public Dictionary<string, string>[] PreviewMetadata { get; set; }
        public string[] AssignmentUserEmails { get; set; }
        public int Revision { get; set; }
        public string RevisionCreatedOn { get; set; }
        public string FormSubmissionId { get; set; }
        public string PaperSize { get; set; }
        public string PaperOrientation { get; set; }
        public double PaperMarginLeft { get; set; }
        public double PaperMarginRight { get; set; }
        public double PaperMarginTop { get; set; }
        public double PaperMarginBottom { get; set; }
        public string GroupId { get; set; }

        #endregion

        public override ApiModel.TaskDocument ToApiModel()
        {
            return new ApiModel.TaskDocument()
            {
                Id = Id,
                TaskId = TaskId,
                DocumentId = DocumentId,
                ThumbnailUrl = ThumbnailUrl
            };
        }
    }

    [Serializable]
    public class TaskDocumentCollection : Common.Model.EntityCollection<TaskDocument, ApiModel.TaskDocumentCollection>
    {
        public TaskDocumentCollection(
            TaskDocument[] items,
            NucleusOneApp app = null
        ) : base(app, items) { }

        public static TaskDocumentCollection FromApiModel(
            ApiModel.TaskDocumentCollection apiModel,
            NucleusOneApp app = null
        )
        {
            return new TaskDocumentCollection(
                items: apiModel.TaskDocuments?.Select((x) => TaskDocument.FromApiModel(x, app)).ToArray());
        }

        public override ApiModel.TaskDocumentCollection ToApiModel()
        {
            return new ApiModel.TaskDocumentCollection()
            {
                TaskDocuments = Items.Select((x) => x.ToApiModel()).ToArray()
            };
        }
    }

    // Originally generated by nucleus_one_utilities
    public interface IDocumentMixin
    {
        #region Properties

        string Id { get; set; }

        string OrganizationId { get; set; }

        string ProjectId { get; set; }

        string ProjectName { get; set; }

        string ProjectAccessType { get; set; }

        string TaskDocumentId { get; set; }

        string TaskDocumentPath { get; set; }

        string TaskDocumentHexColor { get; set; }

        string CreatedOn { get; set; }

        string CreatedByUserId { get; set; }

        string CreatedByUserEmail { get; set; }

        string CreatedByUserName { get; set; }

        string ModifiedOn { get; set; }

        string ModifiedByUserId { get; set; }

        string ModifiedByUserEmail { get; set; }

        string ModifiedByUserName { get; set; }

        string Name { get; set; }

        string NameLower { get; set; }

        string Origin { get; set; }

        bool IsActive { get; set; }

        bool IsMarkedForPurge { get; set; }

        bool IsSigned { get; set; }

        bool SignatureSessionIsActive { get; set; }

        bool HasSinglePageImages { get; set; }

        string SignaturesCompletedOn { get; set; }

        string PurgeMarkedOn { get; set; }

        bool FailedBuildAttempts { get; set; }

        string LastError { get; set; }

        int PageCount { get; set; }

        int FileSize { get; set; }

        string BucketName { get; set; }

        string SourceObjectName { get; set; }

        string ThumbnailObjectName { get; set; }

        Dictionary<string, string>[] PreviewMetadata { get; set; }

        string[] AssignmentUserEmails { get; set; }

        int Revision { get; set; }

        string RevisionCreatedOn { get; set; }

        string FormSubmissionId { get; set; }

        string PaperSize { get; set; }

        string PaperOrientation { get; set; }

        double PaperMarginLeft { get; set; }

        double PaperMarginRight { get; set; }

        double PaperMarginTop { get; set; }

        double PaperMarginBottom { get; set; }

        string GroupId { get; set; }

        #endregion
    }
}
